{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabri\\\\OneDrive\\\\Documentos\\\\ProjetoHorasComplementares\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useContext, createContext, useEffect, useState } from 'react';\nimport { GoogleAuthProvider, signInWithRedirect, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { auth } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthContextProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const googleSignIn = () => {\n    const provider = new GoogleAuthProvider();\n    signInWithRedirect(auth, provider); // Continua o processo de login\n  };\n  const logOut = () => {\n    signOut(auth);\n    // Limpar o localStorage quando o usuário sair\n    localStorage.removeItem('user');\n  };\n  useEffect(() => {\n    // Checar se o usuário está logado ao carregar a página\n    const localStorageUser = JSON.parse(localStorage.getItem('user'));\n    if (localStorageUser) {\n      setUser(localStorageUser);\n    }\n    const unsubscribe = onAuthStateChanged(auth, currentUser => {\n      if (currentUser) {\n        // Se o usuário estiver logado, armazene os dados no localStorage\n        localStorage.setItem('user', JSON.stringify(currentUser));\n        setUser(currentUser);\n      } else {\n        setUser(null);\n      }\n    });\n    return () => unsubscribe();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      googleSignIn,\n      logOut,\n      user\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContextProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthContextProvider;\nexport const UserAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(UserAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n_c2 = UserAuth;\nvar _c, _c2;\n$RefreshReg$(_c, \"AuthContextProvider\");\n$RefreshReg$(_c2, \"UserAuth\");","map":{"version":3,"names":["useContext","createContext","useEffect","useState","GoogleAuthProvider","signInWithRedirect","signOut","onAuthStateChanged","auth","jsxDEV","_jsxDEV","AuthContext","AuthContextProvider","children","_s","user","setUser","googleSignIn","provider","logOut","localStorage","removeItem","localStorageUser","JSON","parse","getItem","unsubscribe","currentUser","setItem","stringify","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","UserAuth","_s2","_c2","$RefreshReg$"],"sources":["C:/Users/gabri/OneDrive/Documentos/ProjetoHorasComplementares/frontend/src/context/AuthContext.js"],"sourcesContent":["import { useContext, createContext, useEffect, useState } from 'react';\r\nimport {\r\n  GoogleAuthProvider,\r\n  signInWithRedirect,\r\n  signOut,\r\n  onAuthStateChanged,\r\n} from 'firebase/auth';\r\nimport { auth } from '../firebase';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthContextProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  const googleSignIn = () => {\r\n    const provider = new GoogleAuthProvider();\r\n    signInWithRedirect(auth, provider); // Continua o processo de login\r\n  };\r\n\r\n  const logOut = () => {\r\n    signOut(auth);\r\n    // Limpar o localStorage quando o usuário sair\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Checar se o usuário está logado ao carregar a página\r\n    const localStorageUser = JSON.parse(localStorage.getItem('user'));\r\n    if (localStorageUser) {\r\n      setUser(localStorageUser);\r\n    }\r\n\r\n    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\r\n      if (currentUser) {\r\n        // Se o usuário estiver logado, armazene os dados no localStorage\r\n        localStorage.setItem('user', JSON.stringify(currentUser));\r\n        setUser(currentUser);\r\n      } else {\r\n        setUser(null);\r\n      }\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ googleSignIn, logOut, user }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const UserAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":";;;AAAA,SAASA,UAAU,EAAEC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACtE,SACEC,kBAAkB,EAClBC,kBAAkB,EAClBC,OAAO,EACPC,kBAAkB,QACb,eAAe;AACtB,SAASC,IAAI,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,WAAW,gBAAGV,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMW,mBAAmB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMc,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,QAAQ,GAAG,IAAId,kBAAkB,CAAC,CAAC;IACzCC,kBAAkB,CAACG,IAAI,EAAEU,QAAQ,CAAC,CAAC,CAAC;EACtC,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBb,OAAO,CAACE,IAAI,CAAC;IACb;IACAY,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAEDnB,SAAS,CAAC,MAAM;IACd;IACA,MAAMoB,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACK,OAAO,CAAC,MAAM,CAAC,CAAC;IACjE,IAAIH,gBAAgB,EAAE;MACpBN,OAAO,CAACM,gBAAgB,CAAC;IAC3B;IAEA,MAAMI,WAAW,GAAGnB,kBAAkB,CAACC,IAAI,EAAGmB,WAAW,IAAK;MAC5D,IAAIA,WAAW,EAAE;QACf;QACAP,YAAY,CAACQ,OAAO,CAAC,MAAM,EAAEL,IAAI,CAACM,SAAS,CAACF,WAAW,CAAC,CAAC;QACzDX,OAAO,CAACW,WAAW,CAAC;MACtB,CAAC,MAAM;QACLX,OAAO,CAAC,IAAI,CAAC;MACf;IACF,CAAC,CAAC;IAEF,OAAO,MAAMU,WAAW,CAAC,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEhB,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACC,KAAK,EAAE;MAAEd,YAAY;MAAEE,MAAM;MAAEJ;IAAK,CAAE;IAAAF,QAAA,EACzDA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACrB,EAAA,CAvCWF,mBAAmB;AAAAwB,EAAA,GAAnBxB,mBAAmB;AAyChC,OAAO,MAAMyB,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,OAAOtC,UAAU,CAACW,WAAW,CAAC;AAChC,CAAC;AAAC2B,GAAA,CAFWD,QAAQ;AAAAE,GAAA,GAARF,QAAQ;AAAA,IAAAD,EAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAJ,EAAA;AAAAI,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}